{"version":3,"sources":["components/TodoItem.tsx","components/AddTodo.tsx","components/Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","props","wrapper","contentwrap","donebtn","removebtn","state","render","handleDone","bind","handleRemove","createRef","document","addEventListener","done","toast","this","current","parentNode","HTMLElement","classList","add","todos","store","get","set","updated","JSON","parse","stringify","forEach","todo","index","date","content","splice","deleteTodos","setTimeout","parentElement","className","removeChild","setState","toggle","updateTodos","toBePushed","alreadyPushed","neww","push","newTodos","ref","id","onClick","Component","AddTodo","swal","fire","title","text","input","confirmButtonText","confirmButtonColor","cancelButtonColor","showCancelButton","cancelButtonText","then","res","value","createElement","Date","toLocaleDateString","appendContainer","footerref","appendChild","dismiss","handleClick","Card","React","getDay","todoDiv","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6763de90.chunk.js","sourcesContent":["import React, { Component, ReactNode, createRef } from \"react\";\r\nimport \"./TodoItem.scss\";\r\nimport { LSTodo } from \"./Card\";\r\nimport store from \"store\";\r\ninterface Props {\r\n  date: string;\r\n  todo: string;\r\n  done?: boolean;\r\n  alreadyPushed?: boolean;\r\n}\r\ninterface State {\r\n  render: boolean;\r\n}\r\nclass TodoItem extends Component<Props, State> {\r\n  wrapper: React.RefObject<HTMLDivElement>;\r\n  contentwrap: React.RefObject<HTMLHeadingElement>;\r\n  donebtn: React.RefObject<HTMLButtonElement>;\r\n  removebtn: React.RefObject<HTMLButtonElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { render: true };\r\n    this.handleDone = this.handleDone.bind(this);\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.contentwrap = createRef();\r\n    this.wrapper = createRef();\r\n    document.addEventListener(\"DOMContentLoaded\", () => {\r\n      if (this.props.done) {\r\n        this.handleDone();\r\n      }\r\n    });\r\n  }\r\n  handleRemove(): void {\r\n    let toast = this.contentwrap.current.parentNode;\r\n    if (toast instanceof HTMLElement) toast.classList.add(\"delete\");\r\n    let todos = store.get(\"todos\");\r\n    let deleteTodos = (todos: string) => {\r\n      const updated: Array<LSTodo> = JSON.parse(JSON.stringify(todos));\r\n      updated.forEach((todo: LSTodo, index: number) => {\r\n        if (todo.date === this.props.date && todo.content === this.props.todo) {\r\n          updated.splice(index, 1);\r\n        }\r\n      });\r\n      return updated;\r\n    };\r\n    store.set(\"todos\", deleteTodos(todos));\r\n    setTimeout(() => {\r\n      //perform cleanup of the parent element which will otherwise remain stale\r\n      if (toast.parentElement.className === \"toast-wrapper\") {\r\n        toast.parentElement.parentElement.removeChild(toast.parentElement);\r\n      }\r\n      this.setState({ render: false });\r\n    }, 1000);\r\n  }\r\n  handleDone(): void {\r\n    let content = this.contentwrap.current;\r\n    let toast = this.wrapper.current;\r\n    let todos = store.get(\"todos\");\r\n    content.classList.toggle(\"strike\");\r\n    toast.classList.toggle(\"strike\");\r\n    let updateTodos = (todos: string) => {\r\n      const updated: Array<LSTodo> = JSON.parse(JSON.stringify(todos));\r\n      updated.forEach((todo: LSTodo, index: number) => {\r\n        if (\r\n          todo.date === this.props.date &&\r\n          todo.content === this.props.todo &&\r\n          (todo.done === false || !todo.done)\r\n        ) {\r\n          updated[index].done = true;\r\n        } else if (\r\n          todo.date === this.props.date &&\r\n          todo.content === this.props.todo &&\r\n          todo.done === true\r\n        ) {\r\n          updated[index].done = false;\r\n        }\r\n      });\r\n      return updated;\r\n    };\r\n    store.set(\"todos\", updateTodos(todos));\r\n  }\r\n  componentDidMount() {\r\n    let todos = store.get(\"todos\");\r\n    let toBePushed = {\r\n      date: this.props.date,\r\n      content: this.props.todo,\r\n      done: this.props.done,\r\n    };\r\n    let newTodos = (todos: string) => {\r\n      const neww = JSON.parse(JSON.stringify(todos));\r\n      neww.push(toBePushed);\r\n      return neww;\r\n    };\r\n    if (!this.props.alreadyPushed) {\r\n      store.set(\"todos\", newTodos(todos));\r\n    }\r\n  }\r\n  render(): ReactNode {\r\n    if (!this.state.render) return null;\r\n    else\r\n      return (\r\n        <div ref={this.wrapper} id=\"todo-item-toast\">\r\n          <h2 ref={this.contentwrap} className=\"content\">\r\n            {this.props.todo}\r\n          </h2>\r\n          <small className=\"date\">{this.props.date}</small>\r\n          <button\r\n            ref={this.donebtn}\r\n            className=\"done\"\r\n            onClick={() => {\r\n              this.handleDone();\r\n            }}\r\n          >\r\n            &#10003;\r\n          </button>\r\n          <button\r\n            ref={this.removebtn}\r\n            className=\"remove\"\r\n            onClick={() => {\r\n              this.handleRemove();\r\n            }}\r\n          >\r\n            &#10005;\r\n          </button>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component, ReactNode } from \"react\";\r\nimport swal from \"sweetalert2\";\r\nimport \"./AddTodo.scss\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { render } from \"react-dom\";\r\nimport Card from \"./Card\";\r\ninterface Props {\r\n  appendContainer: Card;\r\n}\r\ninterface State {}\r\n\r\nclass AddTodo extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n  handleClick(): void {\r\n    swal\r\n      .fire({\r\n        title: \"Add Todo\",\r\n        text: \"Enter Todo text\",\r\n        input: \"text\",\r\n        confirmButtonText: \"Add\",\r\n        confirmButtonColor: \"green\",\r\n        cancelButtonColor: \"red\",\r\n        showCancelButton: true,\r\n        cancelButtonText: \"Cancel\",\r\n      })\r\n      .then((res) => {\r\n        if (res.value) {\r\n          let todo = document.createElement(\"div\");\r\n          todo.className = \"toast-wrapper\";\r\n          render(\r\n            <TodoItem\r\n              date={new Date().toLocaleDateString()}\r\n              todo={res.value}\r\n            />,\r\n            todo\r\n          );\r\n          this.props.appendContainer.footerref.current.appendChild(todo);\r\n        } else if (!res.value && !res.dismiss) this.handleClick();\r\n      });\r\n  }\r\n  render(): ReactNode {\r\n    return (\r\n      <button\r\n        onClick={() => {\r\n          this.handleClick();\r\n        }}\r\n        id=\"add-todo\"\r\n      >\r\n        +\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\nimport \"./Card.scss\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport store from \"store\";\r\nimport { render } from \"react-dom\";\r\ninterface Props {}\r\ninterface State {\r\n  date: string;\r\n}\r\nexport interface LSTodo {\r\n  date: string;\r\n  content: string;\r\n  done: boolean;\r\n}\r\nclass Card extends React.Component<Props, State> {\r\n  footerref: React.RefObject<HTMLElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let weekdays = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n    this.footerref = React.createRef();\r\n    this.state = {\r\n      date: `${\r\n        weekdays[new Date().getDay()]\r\n      }, ${new Date().toLocaleDateString()}`,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    if (!store.get(\"todos\") || store.get(\"todos\") === []) {\r\n      store.set(\"todos\", []);\r\n    } else {\r\n      let todos = JSON.parse(JSON.stringify(store.get(\"todos\")));\r\n      todos.forEach((todo: LSTodo) => {\r\n        let todoDiv = document.createElement(\"div\");\r\n        todoDiv.className = \"toast-wrapper\";\r\n        render(\r\n          <TodoItem\r\n            date={todo.date}\r\n            todo={todo.content}\r\n            done={todo.done}\r\n            alreadyPushed={true}\r\n          />,\r\n          todoDiv\r\n        );\r\n        this.footerref.current.appendChild(todoDiv);\r\n      });\r\n    }\r\n  }\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div id=\"card\">\r\n        <header id=\"cool-header\">\r\n          <pre id=\"date\">{this.state.date}</pre>\r\n          <AddTodo appendContainer={this} />\r\n        </header>\r\n        <footer ref={this.footerref}></footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Card;\r\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport \"./App.scss\";\n\nfunction App() {\n  return <Card />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({});\n"],"sourceRoot":""}