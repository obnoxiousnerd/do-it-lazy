{"version":3,"sources":["components/TodoItem.tsx","components/AddTodo.tsx","components/Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","props","contentwrap","donebtn","removebtn","state","render","handleDone","bind","handleRemove","createRef","toast","this","current","parentNode","HTMLElement","classList","add","setTimeout","parentElement","className","removeChild","setState","content","style","textDecoration","id","ref","todo","date","onClick","Component","AddTodo","swal","fire","title","text","input","confirmButtonText","confirmButtonColor","cancelButtonColor","showCancelButton","cancelButtonText","then","res","value","document","createElement","Date","toDateString","appendContainer","footerref","appendChild","dismiss","handleClick","Card","DateObject","React","time","getHours","getMinutes","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da5286e0.chunk.js","sourcesContent":["import React, { Component, ReactNode, createRef } from \"react\";\r\nimport \"./TodoItem.scss\";\r\n\r\ninterface Props {\r\n  date: string;\r\n  todo: string;\r\n}\r\ninterface State {\r\n  render: boolean;\r\n}\r\n\r\nclass TodoItem extends Component<Props, State> {\r\n  contentwrap: React.RefObject<HTMLHeadingElement>;\r\n  donebtn: React.RefObject<HTMLButtonElement>;\r\n  removebtn: React.RefObject<HTMLButtonElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { render: true };\r\n    this.handleDone = this.handleDone.bind(this);\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.contentwrap = createRef();\r\n  }\r\n  handleRemove(): void {\r\n    let toast = this.contentwrap.current.parentNode;\r\n    if (toast instanceof HTMLElement) toast.classList.add(\"delete\");\r\n    setTimeout(() => {\r\n      //perform cleanup of the parent element which will otherwise remain stale\r\n      if (toast.parentElement.className === \"toast-wrapper\") {\r\n        toast.parentElement.parentElement.removeChild(toast.parentElement);\r\n      }\r\n      this.setState({ render: false });\r\n    }, 1000);\r\n  }\r\n  handleDone(): void {\r\n    let content = this.contentwrap.current;\r\n    if (\r\n      content.style.textDecoration === \"none\" ||\r\n      !content.style.textDecoration\r\n    )\r\n      content.style.textDecoration = \"line-through\";\r\n    else content.style.textDecoration = \"none\";\r\n  }\r\n  render(): ReactNode {\r\n    if (!this.state.render) return null;\r\n    else\r\n      return (\r\n        <div id=\"todo-item-toast\">\r\n          <h2 ref={this.contentwrap} className=\"content\">\r\n            {this.props.todo}\r\n          </h2>\r\n          <small className=\"date\">{this.props.date}</small>\r\n          <button\r\n            ref={this.donebtn}\r\n            className=\"done\"\r\n            onClick={() => {\r\n              this.handleDone();\r\n            }}\r\n          >\r\n            &#10003;\r\n          </button>\r\n          <button\r\n            ref={this.removebtn}\r\n            className=\"remove\"\r\n            onClick={() => {\r\n              this.handleRemove();\r\n            }}\r\n          >\r\n            &#10005;\r\n          </button>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component, ReactNode } from \"react\";\r\nimport swal from \"sweetalert2\";\r\nimport \"./AddTodo.scss\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { render } from \"react-dom\";\r\nimport Card from \"./Card\";\r\ninterface Props {\r\n  appendContainer: Card;\r\n}\r\ninterface State {}\r\n\r\nclass AddTodo extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n  handleClick(): void {\r\n    swal\r\n      .fire({\r\n        title: \"Add Todo\",\r\n        text: \"Enter Todo text\",\r\n        input: \"text\",\r\n        confirmButtonText: \"Add\",\r\n        confirmButtonColor: \"green\",\r\n        cancelButtonColor: \"red\",\r\n        showCancelButton: true,\r\n        cancelButtonText: \"Cancel\",\r\n      })\r\n      .then((res) => {\r\n        if (res.value) {\r\n          let todo = document.createElement(\"div\");\r\n          todo.className = \"toast-wrapper\";\r\n          render(\r\n            <TodoItem date={new Date().toDateString()} todo={res.value} />,\r\n            todo\r\n          );\r\n          this.props.appendContainer.footerref.current.appendChild(todo);\r\n        } else if (!res.value && !res.dismiss) this.handleClick();\r\n      });\r\n  }\r\n  render(): ReactNode {\r\n    return (\r\n      <button\r\n        onClick={() => {\r\n          this.handleClick();\r\n        }}\r\n        id=\"add-todo\"\r\n      >\r\n        +\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\nimport \"./Card.scss\";\r\nimport AddTodo from \"./AddTodo\";\r\ninterface Props {}\r\ninterface State {\r\n  date: string;\r\n  time: string;\r\n}\r\n\r\nclass Card extends React.Component<Props, State> {\r\n  footerref: React.RefObject<HTMLElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.footerref = React.createRef();\r\n    this.state = {\r\n      time: `${this.DateObject.getHours()}:${this.DateObject.getMinutes()}`,\r\n      date: `${this.DateObject.toDateString()}`,\r\n    };\r\n  }\r\n  DateObject = new Date();\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div id=\"card\">\r\n        <header id=\"cool-header\">\r\n          <pre id=\"date\">{this.state.date}</pre>\r\n          <AddTodo appendContainer={this} />\r\n        </header>\r\n        <footer ref={this.footerref}></footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Card;\r\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport \"./App.scss\";\n\nfunction App() {\n  return <Card />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({});\n"],"sourceRoot":""}