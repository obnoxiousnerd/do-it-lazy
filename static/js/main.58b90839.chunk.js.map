{"version":3,"sources":["components/TodoItem.tsx","components/Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","props","contentwrap","donebtn","removebtn","state","handleDone","bind","createRef","content","this","current","style","textDecoration","id","ref","className","todo","date","onClick","Component","Card","DateObject","Date","time","getHours","getMinutes","toDateString","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAoDeA,G,wDAvCb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAJRC,iBAG0B,IAF1BC,aAE0B,IAD1BC,eAC0B,EAExB,EAAKC,MAAQ,GACb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKL,YAAcM,sBAJK,E,yDAOxB,IAAIC,EAAUC,KAAKR,YAAYS,QAEI,SAAjCF,EAAQG,MAAMC,gBACbJ,EAAQG,MAAMC,eAGZJ,EAAQG,MAAMC,eAAiB,OADlCJ,EAAQG,MAAMC,eAAiB,iB,+BAGd,IAAD,OAClB,OACE,yBAAKC,GAAG,mBACN,wBAAIC,IAAKL,KAAKR,YAAac,UAAU,WAClCN,KAAKT,MAAMgB,MAEd,2BAAOD,UAAU,QAAQN,KAAKT,MAAMiB,MACpC,4BACEH,IAAKL,KAAKP,QACVa,UAAU,OACVG,QAAS,WACP,EAAKb,eAJT,UASA,4BAAQS,IAAKL,KAAKN,UAAWY,UAAU,UAAvC,e,GAnCeI,cCgCRC,E,kDA/Bb,WAAYpB,GAAe,IAAD,8BACxB,cAAMA,IAMRqB,WAAa,IAAIC,KALf,EAAKlB,MAAQ,CACXmB,KAAK,GAAD,OAAK,EAAKF,WAAWG,WAArB,YAAmC,EAAKH,WAAWI,cACvDR,KAAK,GAAD,OAAK,EAAKI,WAAWK,iBAJH,E,qDAUxB,OACE,yBAAKb,GAAG,QACN,4BAAQA,GAAG,eACT,yBAAKA,GAAG,QAAQJ,KAAKL,MAAMa,OAE7B,gCACE,kBAAC,EAAD,CAAUA,KAAK,YAAYD,KAAK,2BAChC,kBAAC,EAAD,CACEC,KAAK,YACLD,KAAK,sFAEP,kBAAC,EAAD,CACEC,KAAK,YACLD,KAAK,4F,GAxBEW,IAAMR,W,MCDVS,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.58b90839.chunk.js","sourcesContent":["import React, { Component, ReactNode, createRef } from \"react\";\r\nimport \"./TodoItem.scss\";\r\n\r\ninterface Props {\r\n  date: string;\r\n  todo: string;\r\n}\r\ninterface State {}\r\n\r\nclass TodoItem extends Component<Props, State> {\r\n  contentwrap: React.RefObject<HTMLHeadingElement>;\r\n  donebtn: React.RefObject<HTMLButtonElement>;\r\n  removebtn: React.RefObject<HTMLButtonElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.handleDone = this.handleDone.bind(this);\r\n    this.contentwrap = createRef();\r\n  }\r\n  handleDone(): void {\r\n    let content = this.contentwrap.current;\r\n    if (\r\n      content.style.textDecoration === \"none\" ||\r\n      !content.style.textDecoration\r\n    )\r\n      content.style.textDecoration = \"line-through\";\r\n    else content.style.textDecoration = \"none\";\r\n  }\r\n  render(): ReactNode {\r\n    return (\r\n      <div id=\"todo-item-toast\">\r\n        <h2 ref={this.contentwrap} className=\"content\">\r\n          {this.props.todo}\r\n        </h2>\r\n        <small className=\"date\">{this.props.date}</small>\r\n        <button\r\n          ref={this.donebtn}\r\n          className=\"done\"\r\n          onClick={() => {\r\n            this.handleDone();\r\n          }}\r\n        >\r\n          &#10003;\r\n        </button>\r\n        <button ref={this.removebtn} className=\"remove\">\r\n          &#10005;\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport \"./Card.scss\";\r\nimport TodoItem from \"./TodoItem\";\r\ninterface Props {}\r\ninterface State {\r\n  date: string;\r\n  time: string;\r\n}\r\n\r\nclass Card extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      time: `${this.DateObject.getHours()}:${this.DateObject.getMinutes()}`,\r\n      date: `${this.DateObject.toDateString()}`,\r\n    };\r\n  }\r\n  DateObject = new Date();\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div id=\"card\">\r\n        <header id=\"cool-header\">\r\n          <pre id=\"date\">{this.state.date}</pre>\r\n        </header>\r\n        <footer>\r\n          <TodoItem date=\"16/4/2020\" todo=\"Make CLI for TeddyTags\" />\r\n          <TodoItem\r\n            date=\"16/4/2020\"\r\n            todo=\"Make CLI for TeddyTags lorem ipsum dummy dummy sit amet text i dont craae dfigddf\"\r\n          />\r\n          <TodoItem\r\n            date=\"16/4/2020\"\r\n            todo=\"Make CLI for TeddyTags lorem ipsum dummy dummy sit amet text i dont craae dfigddf\"\r\n          />\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Card />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}